//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

public class JSON2Apex {

	public class ThemeColors {
		public String colorType {get;set;} 
		public ForegroundColorStyle color {get;set;} 

		public ThemeColors(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'colorType') {
							colorType = parser.getText();
						} else if (text == 'color') {
							color = new ForegroundColorStyle(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'ThemeColors consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class RgbColor_Z {
		public Integer red {get;set;} 
		public Double green {get;set;} 
		public Double blue {get;set;} 

		public RgbColor_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'red') {
							red = parser.getIntegerValue();
						} else if (text == 'green') {
							green = parser.getDoubleValue();
						} else if (text == 'blue') {
							blue = parser.getDoubleValue();
						} else {
							System.debug(LoggingLevel.WARN, 'RgbColor_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public String spreadsheetId {get;set;} 
	public Properties properties {get;set;} 
	public List<Sheets> sheets {get;set;} 
	public String spreadsheetUrl {get;set;} 

	public JSON2Apex(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'spreadsheetId') {
						spreadsheetId = parser.getText();
					} else if (text == 'properties') {
						properties = new Properties(parser);
					} else if (text == 'sheets') {
						sheets = arrayOfSheets(parser);
					} else if (text == 'spreadsheetUrl') {
						spreadsheetUrl = parser.getText();
					} else {
						System.debug(LoggingLevel.WARN, 'JSON2Apex consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Properties_Z {
		public Integer sheetId {get;set;} 
		public String title {get;set;} 
		public Integer index {get;set;} 
		public String sheetType {get;set;} 
		public GridProperties gridProperties {get;set;} 

		public Properties_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'sheetId') {
							sheetId = parser.getIntegerValue();
						} else if (text == 'title') {
							title = parser.getText();
						} else if (text == 'index') {
							index = parser.getIntegerValue();
						} else if (text == 'sheetType') {
							sheetType = parser.getText();
						} else if (text == 'gridProperties') {
							gridProperties = new GridProperties(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Properties_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class DefaultFormat {
		public BackgroundColor backgroundColor {get;set;} 
		public Padding padding {get;set;} 
		public String verticalAlignment {get;set;} 
		public String wrapStrategy {get;set;} 
		public TextFormat textFormat {get;set;} 
		public BackgroundColorStyle backgroundColorStyle {get;set;} 

		public DefaultFormat(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'backgroundColor') {
							backgroundColor = new BackgroundColor(parser);
						} else if (text == 'padding') {
							padding = new Padding(parser);
						} else if (text == 'verticalAlignment') {
							verticalAlignment = parser.getText();
						} else if (text == 'wrapStrategy') {
							wrapStrategy = parser.getText();
						} else if (text == 'textFormat') {
							textFormat = new TextFormat(parser);
						} else if (text == 'backgroundColorStyle') {
							backgroundColorStyle = new BackgroundColorStyle(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'DefaultFormat consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Properties {
		public String title {get;set;} 
		public String locale {get;set;} 
		public String autoRecalc {get;set;} 
		public String timeZone {get;set;} 
		public DefaultFormat defaultFormat {get;set;} 
		public SpreadsheetTheme spreadsheetTheme {get;set;} 

		public Properties(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'title') {
							title = parser.getText();
						} else if (text == 'locale') {
							locale = parser.getText();
						} else if (text == 'autoRecalc') {
							autoRecalc = parser.getText();
						} else if (text == 'timeZone') {
							timeZone = parser.getText();
						} else if (text == 'defaultFormat') {
							defaultFormat = new DefaultFormat(parser);
						} else if (text == 'spreadsheetTheme') {
							spreadsheetTheme = new SpreadsheetTheme(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Properties consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Color_Z {
		public RgbColor_Z rgbColor {get;set;} 

		public Color_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'rgbColor') {
							rgbColor = new RgbColor_Z(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Color_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ForegroundColorStyle {
		public ForegroundColor rgbColor {get;set;} 

		public ForegroundColorStyle(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'rgbColor') {
							rgbColor = new ForegroundColor(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'ForegroundColorStyle consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Values_Z {
		public UserEnteredValue_Z userEnteredValue {get;set;} 
		public UserEnteredValue_Z effectiveValue {get;set;} 
		public String formattedValue {get;set;} 
		public UserEnteredFormat userEnteredFormat {get;set;} 
		public EffectiveFormat_Z effectiveFormat {get;set;} 

		public Values_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'userEnteredValue') {
							userEnteredValue = new UserEnteredValue_Z(parser);
						} else if (text == 'effectiveValue') {
							effectiveValue = new UserEnteredValue_Z(parser);
						} else if (text == 'formattedValue') {
							formattedValue = parser.getText();
						} else if (text == 'userEnteredFormat') {
							userEnteredFormat = new UserEnteredFormat(parser);
						} else if (text == 'effectiveFormat') {
							effectiveFormat = new EffectiveFormat_Z(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Values_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class RowData {
		public List<Values_Z> values {get;set;} 

		public RowData(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'values') {
							values = arrayOfValues_Z(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'RowData consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class GridProperties {
		public Integer rowCount {get;set;} 
		public Integer columnCount {get;set;} 

		public GridProperties(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'rowCount') {
							rowCount = parser.getIntegerValue();
						} else if (text == 'columnCount') {
							columnCount = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'GridProperties consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class RgbColor {
		public Double red {get;set;} 
		public Double green {get;set;} 
		public Double blue {get;set;} 

		public RgbColor(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'red') {
							red = parser.getDoubleValue();
						} else if (text == 'green') {
							green = parser.getDoubleValue();
						} else if (text == 'blue') {
							blue = parser.getDoubleValue();
						} else {
							System.debug(LoggingLevel.WARN, 'RgbColor consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Padding {
		public Integer top {get;set;} 
		public Integer right {get;set;} 
		public Integer bottom {get;set;} 
		public Integer left {get;set;} 

		public Padding(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'top') {
							top = parser.getIntegerValue();
						} else if (text == 'right') {
							right = parser.getIntegerValue();
						} else if (text == 'bottom') {
							bottom = parser.getIntegerValue();
						} else if (text == 'left') {
							left = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Padding consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class TextFormat {
		public ForegroundColor foregroundColor {get;set;} 
		public String fontFamily {get;set;} 
		public Integer fontSize {get;set;} 
		public Boolean bold {get;set;} 
		public Boolean italic {get;set;} 
		public Boolean strikethrough {get;set;} 
		public Boolean underline {get;set;} 
		public ForegroundColorStyle foregroundColorStyle {get;set;} 

		public TextFormat(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'foregroundColor') {
							foregroundColor = new ForegroundColor(parser);
						} else if (text == 'fontFamily') {
							fontFamily = parser.getText();
						} else if (text == 'fontSize') {
							fontSize = parser.getIntegerValue();
						} else if (text == 'bold') {
							bold = parser.getBooleanValue();
						} else if (text == 'italic') {
							italic = parser.getBooleanValue();
						} else if (text == 'strikethrough') {
							strikethrough = parser.getBooleanValue();
						} else if (text == 'underline') {
							underline = parser.getBooleanValue();
						} else if (text == 'foregroundColorStyle') {
							foregroundColorStyle = new ForegroundColorStyle(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'TextFormat consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ForegroundColor {

		public ForegroundColor(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'ForegroundColor consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class UserEnteredValue_Z {
		public Integer numberValue {get;set;} 

		public UserEnteredValue_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'numberValue') {
							numberValue = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'UserEnteredValue_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Sheets {
		public Properties_Z properties {get;set;} 
		public List<Data> data {get;set;} 

		public Sheets(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'properties') {
							properties = new Properties_Z(parser);
						} else if (text == 'data') {
							data = arrayOfData(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Sheets consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class SpreadsheetTheme {
		public String primaryFontFamily {get;set;} 
		public List<ThemeColors> themeColors {get;set;} 

		public SpreadsheetTheme(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'primaryFontFamily') {
							primaryFontFamily = parser.getText();
						} else if (text == 'themeColors') {
							themeColors = arrayOfThemeColors(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'SpreadsheetTheme consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class EffectiveFormat {
		public BackgroundColor backgroundColor {get;set;} 
		public Padding padding {get;set;} 
		public String horizontalAlignment {get;set;} 
		public String verticalAlignment {get;set;} 
		public String wrapStrategy {get;set;} 
		public TextFormat textFormat {get;set;} 
		public String hyperlinkDisplayType {get;set;} 
		public BackgroundColorStyle backgroundColorStyle {get;set;} 

		public EffectiveFormat(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'backgroundColor') {
							backgroundColor = new BackgroundColor(parser);
						} else if (text == 'padding') {
							padding = new Padding(parser);
						} else if (text == 'horizontalAlignment') {
							horizontalAlignment = parser.getText();
						} else if (text == 'verticalAlignment') {
							verticalAlignment = parser.getText();
						} else if (text == 'wrapStrategy') {
							wrapStrategy = parser.getText();
						} else if (text == 'textFormat') {
							textFormat = new TextFormat(parser);
						} else if (text == 'hyperlinkDisplayType') {
							hyperlinkDisplayType = parser.getText();
						} else if (text == 'backgroundColorStyle') {
							backgroundColorStyle = new BackgroundColorStyle(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'EffectiveFormat consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class UserEnteredFormat {
		public NumberFormat numberFormat {get;set;} 

		public UserEnteredFormat(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'numberFormat') {
							numberFormat = new NumberFormat(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'UserEnteredFormat consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Color {
		public RgbColor rgbColor {get;set;} 

		public Color(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'rgbColor') {
							rgbColor = new RgbColor(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Color consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class UserEnteredValue {
		public String stringValue {get;set;} 

		public UserEnteredValue(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'stringValue') {
							stringValue = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'UserEnteredValue consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Data {
		public List<RowData> rowData {get;set;} 
		public List<RowMetadata> rowMetadata {get;set;} 
		public List<RowMetadata> columnMetadata {get;set;} 

		public Data(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'rowData') {
							rowData = arrayOfRowData(parser);
						} else if (text == 'rowMetadata') {
							rowMetadata = arrayOfRowMetadata(parser);
						} else if (text == 'columnMetadata') {
							columnMetadata = arrayOfRowMetadata(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Data consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class BackgroundColorStyle {
		public BackgroundColor rgbColor {get;set;} 

		public BackgroundColorStyle(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'rgbColor') {
							rgbColor = new BackgroundColor(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'BackgroundColorStyle consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class RowMetadata {
		public Integer pixelSize {get;set;} 

		public RowMetadata(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'pixelSize') {
							pixelSize = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'RowMetadata consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class EffectiveFormat_Z {
		public NumberFormat numberFormat {get;set;} 
		public BackgroundColor backgroundColor {get;set;} 
		public Padding padding {get;set;} 
		public String horizontalAlignment {get;set;} 
		public String verticalAlignment {get;set;} 
		public String wrapStrategy {get;set;} 
		public TextFormat textFormat {get;set;} 
		public String hyperlinkDisplayType {get;set;} 
		public BackgroundColorStyle backgroundColorStyle {get;set;} 

		public EffectiveFormat_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'numberFormat') {
							numberFormat = new NumberFormat(parser);
						} else if (text == 'backgroundColor') {
							backgroundColor = new BackgroundColor(parser);
						} else if (text == 'padding') {
							padding = new Padding(parser);
						} else if (text == 'horizontalAlignment') {
							horizontalAlignment = parser.getText();
						} else if (text == 'verticalAlignment') {
							verticalAlignment = parser.getText();
						} else if (text == 'wrapStrategy') {
							wrapStrategy = parser.getText();
						} else if (text == 'textFormat') {
							textFormat = new TextFormat(parser);
						} else if (text == 'hyperlinkDisplayType') {
							hyperlinkDisplayType = parser.getText();
						} else if (text == 'backgroundColorStyle') {
							backgroundColorStyle = new BackgroundColorStyle(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'EffectiveFormat_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class BackgroundColor {
		public Integer red {get;set;} 
		public Integer green {get;set;} 
		public Integer blue {get;set;} 

		public BackgroundColor(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'red') {
							red = parser.getIntegerValue();
						} else if (text == 'green') {
							green = parser.getIntegerValue();
						} else if (text == 'blue') {
							blue = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'BackgroundColor consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class NumberFormat {
		public String type {get;set;} 
		public String pattern {get;set;} 

		public NumberFormat(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'type') {
							type = parser.getText();
						} else if (text == 'pattern') {
							pattern = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'NumberFormat consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static JSON2Apex parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new JSON2Apex(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	

    private static List<Values_Z> arrayOfValues_Z(System.JSONParser p) {
        List<Values_Z> res = new List<Values_Z>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Values_Z(p));
        }
        return res;
    }

    private static List<Data> arrayOfData(System.JSONParser p) {
        List<Data> res = new List<Data>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Data(p));
        }
        return res;
    }


    private static List<Sheets> arrayOfSheets(System.JSONParser p) {
        List<Sheets> res = new List<Sheets>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Sheets(p));
        }
        return res;
    }



    private static List<ThemeColors> arrayOfThemeColors(System.JSONParser p) {
        List<ThemeColors> res = new List<ThemeColors>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new ThemeColors(p));
        }
        return res;
    }

    private static List<RowData> arrayOfRowData(System.JSONParser p) {
        List<RowData> res = new List<RowData>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new RowData(p));
        }
        return res;
    }

    private static List<RowMetadata> arrayOfRowMetadata(System.JSONParser p) {
        List<RowMetadata> res = new List<RowMetadata>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new RowMetadata(p));
        }
        return res;
    }



}